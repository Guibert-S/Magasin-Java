
import java.io.File;
import java.io.FileInputStream;
import java.io.FileWriter;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.HashMap;
import java.util.Map;
import java.util.Map.Entry;

	

	/**methode pour lire et afficher ce que contient le fichier texte 
	 * @param chemin du fichier texte ou variable contenant le chemin du fichier txt.
	 */
		
	public static void afficherFichierSauvegarde(String chemin) { // chemin du fichier que l'on veut afficher //
		
		File file = new File(chemin);
		
		try {
			BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(file),"UTF-8"));
			String line = reader.readLine();
			
			while(line!= null )
			{
				System.out.println(line);
				System.out.println();
				line = reader.readLine();  // permet d'incrémenter chaque ligne sinon on boucle sur la premiere// 
			}
			reader.close(); // fermer le fichier //
		}catch(IOException e) { // attraper l'exeption //
			e.printStackTrace(); 
		}
	}
	
	
	/**methode pour afficher ce que contient le fichier texte 
	 * @param chemin du fichier texte ou variable contenant le chemin du fichier txt.
	 * @param nom de l'Article que l'on veut écrire dans le fichier texte pour le sauvegarder.
	 */
	
	
	public static void ecrireDansFichier(String chemin, Article article) { // chemin du fichier ou l'on veut écrire //
		
		File file = new File(chemin);
		
		try {
			FileWriter writer = new FileWriter(file,true); // argument True = surcharge constructeur qui permet de ne pas écraser les données existantes
			BufferedWriter bw =  new BufferedWriter(writer);
			bw.write(article.getNom()+','+article.getPrixAchat()+','+article.getPrixVente()+','+article.getCategorie()+Magasin.getArticles().get(article)); // on converti article en string car la fonction prend uniquement des strings
			bw.newLine();
			bw.close(); // fermer car sinon continue à lire le fichier //
		} catch(IOException e) { // attraper les exeptions
			e.printStackTrace(); 
			}
		
	}

	/**fonctipour afficher ce que contient le fichier texte 
	 * @param String chemin du fichier texte ou variable contenant le chemin du fichier txt.
	 * @param HashMap<Article,Integer>  nom du dictionnaire que l'on veut sauvegarder dans le fichier texte.
	 */


	public static void ecrireFichier(String chemin,Map<Article, Integer> map ) { // chemin du fichier ou l'on veut écrire //
		File file = new File(chemin);
	
		for (Entry <Article,Integer> element : map.entrySet()) {
		
		
			try {
				FileWriter writer = new FileWriter(file,true); // argument True = surcharge constructeur qui permet de ne pas écraser les données existantes
				BufferedWriter bw =  new BufferedWriter(writer);
				bw.write(element.getKey().getNom()+','+element.getKey().getPrixAchat()+','+element.getKey().getPrixVente()+','+element.getKey().getCategorie()+','+element.getValue()); // on converti article en string car la fonction prend uniquement des strings
				bw.newLine();
				bw.close(); // fermer car sinon continue à lire le fichier //
			} catch(IOException e) { // attraper les exeptions
				e.printStackTrace(); 
			}
	
		}
	
	}



	/**fonction pour lire le fichier txt 
	 * @param String chemin du fichier texte ou variable contenant le chemin du fichier txt.
	 */


	public static void lireFichierSauvegarder(String chemin) { // chemin du fichier que l'on veut afficher //
	
		File file = new File(chemin);
		final String SEPARATEUR= ",";
		String nomArticle = null;
		String categorie = null ;
		double prixAchat = 0;
		double prixVente = 0;
		int stock = 0;
	
		try {
			BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(file),"UTF-8"));
		
			String line = reader.readLine();
			//while(line!= null)
			{
				line = reader.readLine();
				String mots []  = line.split(SEPARATEUR);
				for (int i = 0; i <= mots.length; i++) {
					// System.out.println(mots[i]); verifier // 
					nomArticle = mots[0];
					prixAchat = Double.parseDouble(mots[1]);
					prixVente = Double.parseDouble(mots[2]);
					categorie = mots[3];
					stock = Integer.parseInt(mots[4]);
	            
	        
		Magasin.getArticles().put(new Article(nomArticle,  prixAchat,  prixVente,categorie),stock);// permet d'incrémenter chaque ligne sinon on boucle sur la premiere// 
		}
		}
		reader.close(); // fermer le fichier //
		}catch(IOException e) { // attraper l'exeption //
		e.printStackTrace(); 
		}
	
	}


	public static void doublon(Map<Article, Integer> map ) {
	}

	public static void afficherTeteMenu() {
	
	System.out.println( "-----------------------------------");
	System.out.println( "           Bienvenue               ");
	System.out.println( "       dans notre magasin:         ");
	System.out.println(    Magasin.getNom().toUpperCase()           );
	System.out.println( "-----------------------------------");
}

	/** methode pour afficher le menu dans la console 
	 */

	public static void afficherMenu1() {
		System.out.println();
		System.out.println( "------ \n Séléction Menu Manager \n ------" );
	
		System.out.println( " Option 0 : Quitter" );
		System.out.println( " Option 1 : Ajouter un article" );
		System.out.println( " Option 2 : Supprimer un article" );
		System.out.println( " Option 3 : Ajouter un employé " );
		System.out.println( " Option 4 : Licencier un employé " );
		System.out.println( " Option 5 : Afficher Inventaire" );
		System.out.println( " Option 6 : Afficher Employés Menage" );
		System.out.println( " Option 7 : Afficher Vendeur" );
		System.out.println( " Option 8 : Gérer les stocks " );
	}

	/** methode pour lancer le menu et naviguer dans le magasin 
	 */

	public static void lancerMenu1() {
		afficherTeteMenu();
		boolean menu = true;
		do {
			afficherMenu1();
			int choix = Magasin.objet.nextInt(); 
		
			switch(choix) {
		
			case(0):
				System.out.println( " Bonne journée ! " );
				menu = false;
				break;
			case(1):
				System.out.println( " Vous avez séléctionner 1 :  Ajouter un article ");
				Article a = new Article();
				Magasin.ajouterArticle(a);
				
				break;
			case(2):
				System.out.println( " Vous avez séléctionner 2 :  Supprimer un article ");
				Scanner scan = new Scanner(System.in);
				System.out.print("quel article souhaitez vous supprimer : \n");
				String nom = scan.nextLine();
				System.out.print("quel est la categrie de votre article : choix entre P:premium, C, confort et E, entré de gamme");
				String categorie = scan.nextLine();
				if (Magasin.contenu(nom,categorie)){
					Magasin.supArticle(nom,categorie);
				}
				else {
					System.out.println("nous ne possedons pas ce produit dans le magasin il est donc impossible de le supprimer ");
				}
				
				break;
			case(3):
				System.out.println( " Vous avez séléctionner 3 :  Ajouter un employé ");
				Manager.Embaucher();

				break;
			case(4):
				System.out.println( " Vous avez séléctionner 4 : Licencier un employé");
				Manager.Licencier();

				break;
			case(5):
				System.out.println( " Vous avez séléctionner 5 : Afficher inventaire ");
				Magasin.afficherInventaire();
			
				break;
			case(6):
				System.out.println( " Vous avez séléctionner 6 : Afficher Employés Menage ");
				Manager.afficherEmployeMenage();
			
				break;
			case(7):
				System.out.println( " Vous avez séléctionner 7 : Afficher Vendeurs");
				Manager.afficherEmployeVendeur();
				
				break;
			case(8):
				System.out.println( " Vous avez séléctionner 6 : Gérer les stocks ");
				// a faire jsp comment faire si on chosiit le fournisseur nous meme et tout 
			
				break;
			default :
				System.out.println( " Entrer une option valide ! " );}
					}while(menu==true);
		}


	public static void afficherMenu2() {
		System.out.println();
		System.out.println( "------ \n Séléction Menu Client \n ------" );
		
		System.out.println( " Option 0 : Quitter le magasin" );
		System.out.println( " Option 1 : Acheter un produit" );
		System.out.println( " Option 2 : Voir les produits" );
		System.out.println( " Option 3 : Conseil en fonction de votre budget " );
	}

	/** methode pour lancer le menu et naviguer dans le magasin 
	 */

	public static void lancerMenu2() {
		afficherTeteMenu();
		boolean menu = true;
		do {
			afficherMenu2();
			int choix = Magasin.objet.nextInt(); 
		
			switch(choix) {
		
			case(0):
				System.out.println( " Bonne journée ! " );
				menu = false;
				break;
			case(1):
				System.out.println( " Vous avez séléctionner 1 :  Acheter un produit ");
				Magasin.afficherInventaire();
				Scanner scan = new Scanner(System.in);
				System.out.print("quel article souhaitez vous acheter : \n");
				String nom = scan.nextLine();
				System.out.print("quel est la categrie de votre article : choix entre P:premium, C, confort et E, entré de gamme \n ");
				String categorie = scan.nextLine();
				
				if (Magasin.contenu(nom,categorie)){ //marche pas 
					System.out.print(" Quel est votre nom: \n");
					String nomClient = scan.nextLine();
					System.out.print("Quel est votre prénom \n");
					String prenomClient = scan.nextLine();
					System.out.print(" Quel est votre budjet : \n"); // bizarre de demander ca mais obligé pour creer un client je crois
					int argent = scan.nextInt();
					Client c = new Client(nomClient,prenomClient,argent); //marche pas mais jsp pourquoi
					Vendeur v = Manager.indiceAuHasard(); // prend un vendeur au hasard parmi ceux existant 
					Article a = Magasin.traduction(prenomClient, categorie);
					Magasin.vendre(c,a,v); 
				}
				else {
					System.out.println("nous ne possedons pas ce produit dans le magasin, desirez vous autre chose ? ");
				}
				break;
			case(2):
				System.out.println( " Vous avez séléctionner 2 :  Voir les produits ");
				Magasin.afficherInventaire();
			
				break;
			case(3):
				System.out.println( " Vous avez séléctionner 2 :  Voir les produits ");
				System.out.print(" Quel est votre nom: \n");
				String nomClient = scan.nextLine();
				System.out.print("Quel est votre prénom \n");
				String prenomClient = scan.nextLine();
				System.out.print(" Quel est votre budjet : \n"); // bizarre de demander ca mais obligé pour creer un client je crois
				int argent = scan.nextInt();
				Client c = new Client(nomClient,prenomClient,argent); //marche pas mais jsp pourquoi
				Magasin.dirigerClients(c);
			
				break;
			case(4):
			
				break;
			case(5):
				// inserer fonction // ;
				break;
			case(6):
				// inserer fonction // ;
				break;
			default :
				System.out.println( " Entrer une option valide ! " );}
				}while(menu==true);
		}
}
